@using System.Activities.Statements
@using System.Globalization
@using OCMovers_MC4.Models
@using OCMovers_MC4.ViewModel

@{
    OCMovers_MC4.Models.EstimateForm estimateForm = (OCMovers_MC4.Models.EstimateForm)ViewData["estimateForm"];

	//EstimateFormInventory estimateFormInventory = (IEnumerable)(EstimateFormInventory)ViewData["estimateFormInventory"];
	//EstimateFormInventory estimateFormInventory = (IEnumerable<EstimateFormInventory>)ViewData["estimateFormInventory"];

	//EstimateFormInventory estimateFormInventory = ViewData["estimateFormInventory"] as List<EstimateFormInventory>;

	//DateTime movestart = @estimateForm.moveDateStart;
	DateTime moveend = @estimateForm.moveDateEnd;
}

@{
    var name = @estimateForm.name;
    var temp = name.Split(' ');
    
    TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;
    var firstName = textInfo.ToTitleCase(temp[0]);
}

<p>Hello @firstName,</p>

<p>Thank you for contacting Old City Movers for your moving needs.  We value your business!</p>

<p>Please find below a copy of the Estimate Form that was submitted @estimateForm.submitDate with the following information.</p>

<p>We will get back to you with a formal estimate via email to @estimateForm.email within 24 hours.  If you have any questions, please do not hesitate to ask.</p>

<p>Thank you!<br />
Old City Movers<br />
Philadelphia, PA<br />
https://oldcitymovers.com<br />
(267) 205-5209<br />
</p>


<table style="width: 600px;" cellpadding="5" cellspacing="0">
    <tr>
		<td colspan="2" style="padding-top: 20px; border-bottom: 4px solid #000;"><b>Contact Information</b></td>
	</tr>
    <tr>
        <td style="vertical-align: top;">Name:</td>
        <td>@textInfo.ToTitleCase(@estimateForm.name) </td>
    </tr>
    <tr>
        <td style="vertical-align: top;">Previous Customer:</td>
        <td>@(estimateForm.PreviousCustomer ? "Yes" : "No") 
            @if (!string.IsNullOrEmpty(estimateForm.PreviousCustomerName))
            {
                @estimateForm.PreviousCustomerName
            } 
        </td>
    </tr>
    <tr>
        <td style="vertical-align: top;">Packing Services:</td>
        <td>@(estimateForm.packingServices ? "Yes" : "No")</td>
    </tr>
	<tr>
        <td style="vertical-align: top;">Email:</td>
		<td>@estimateForm.email</td>
	</tr>
	<tr>
        <td style="vertical-align: top;">Phone:</td>
        @{
            var phone = @estimateForm.phone.Replace("-","").Replace("(","").Replace(")","").Replace(" ","").Trim();
        }
		<td>@String.Format("{0:###-###-####}", Convert.ToInt64(@phone))</td>
	</tr>
    <tr>
        <td colspan="2" style="padding-top: 20px; border-bottom: 4px solid #000;"><b>Locations Information</b></td>
    </tr>
    <tr>
		<td style="width: 190px; vertical-align: top;">Brief Descripton of Move:</td>
		<td>@estimateForm.moveDescription</td>
	</tr>
    <tr>
        <td style="width: 190px; vertical-align: top;">Requested Move Date:</td>
        <td>@String.Format("{0:dddd, MMMM d, yyyy}", @moveend)</td>
    </tr>
    <tr>
        <td style="width: 190px;">Move date is flexible:</td>
        <td>
            @{
                if (@estimateForm.IsDateFlexible)
                {
                    <text>Yes</text>
                }
                else
                {
                    <text>No</text>
                }
            }
        </td>
    </tr>

    @foreach (var a in estimateForm.Addresses)
    {
        <tr>
            <td colspan="2" style="padding-top: 20px; border-bottom: 4px solid #000;"><b>@a.AddressType</b></td>
        </tr>
        <tr>
            <td style="vertical-align: top;">Location</td>
            <td>
                @{
                    var address = string.Empty;
                    var markerString = string.Concat(a.Address1, "+", a.City, "+", a.State, "+", a.Postcode);

                    if (!String.IsNullOrEmpty(a.BuildingName))
                    {
                        address = string.Concat(address, string.Concat(a.BuildingName, ", "));
                    }

                    address = string.Concat(address, string.Concat(a.Address1, ", "));

                    if (string.IsNullOrEmpty(a.AptNum))
                    {
                        address = string.Concat(address, string.Concat(a.AptNum, ", "));
                    }

                    address = string.Concat(address, string.Concat(a.City, ", ", a.State, " ", a.Postcode));

                }

                <a href="https://maps.google.com/maps/search/?q=@markerString.Replace(" ", "+").Replace(",", "")" _target="blank">@address</a>
            </td>
        </tr>
        <tr>
            <td style="width: 190px; vertical-align: top;">Type:</td>
            <td>@a.HouseOrApt</td>
        </tr>

        if (@a.HouseOrApt == "House")
        {
            <tr>
                <td style="width: 190px; vertical-align: top;">House stories:</td>
                <td>@a.HouseStories</td>
            </tr>
            <tr>
                <td style="vertical-align: top;">Stairs:</td>
                <td>@(@a.StairsDescription ?? "No")</td>
            </tr>
            <tr>
                <td style="vertical-align: top;">Long walks:</td>
                <td>@(@a.LongWalksDescription ?? "No")</td>
            </tr>
            <tr>
                <td style="vertical-align: top;">Number of rooms:</td>
                <td>@a.NumberOfBedrooms</td>
            </tr>
        
            if (!String.IsNullOrEmpty(@a.Inventory))
            {
                <tr>
                    <td style=" vertical-align: top;">Inventory:</td>
                    <td>@a.Inventory</td>
                </tr>
            }
            
            <tr>
                <td style="vertical-align: top;">Special care items:</td>
                <td>@(@a.SpecialCareDescription ?? "No")</td>
            </tr>
            <tr>
                <td style="vertical-align: top;">Estimated box count:</td>
                <td>@a.BoxCount</td>
            </tr>
            <tr>
                <td style="vertical-align: top;">Location notes:</td>
                <td>@a.Notes</td>
            </tr>
        }

        if (@a.HouseOrApt == "Apartment")
        {
            <tr>
                <td style="vertical-align: top;">Elevator or Stairs:</td>
                <td>@a.ElevatorStairs</td>
            </tr>

            if (@a.AptFloor != null)
            {
                <tr>
                    <td style="width: 190px; vertical-align: top;">Floor:</td>
                    <td>@a.AptFloor</td>
                </tr>
            }
            
            <tr>
                <td style="vertical-align: top;">Elevator Stairs Restrictions:</td>
                <td>@(@a.ElevatorStairsDescription ?? "No")</td>
            </tr>
            <tr>
                <td style="vertical-align: top;">Multiple levels</td>
                <td>@(@a.ApartmentMultipleLevelsDescription ?? "No")</td>
            </tr>
            <tr>
                <td style="vertical-align: top;">Stairs to front door:</td>
                <td>@(@a.Stairs ? "No" : "Yes")</td>
            </tr>

            if (@a.Stairs)
            {
                <tr>
                    <td style="vertical-align: top;">Number of steps:</td>
                    <td>@a.StairsDescription</td>
                </tr>
            }

            <tr>
                <td style="vertical-align: top;">Long walks:</td>
                <td>@(@a.LongWalksDescription ?? "No")</td>
            </tr>

            if (!String.IsNullOrEmpty(@a.Inventory))
            {
                <tr>
                    <td style=" vertical-align: top;">Inventory:</td>
                    <td>@a.Inventory</td>
                </tr>
            }

            <tr>
                <td style="vertical-align: top;">Special care items:</td>
                <td>@(@a.SpecialCareDescription ?? "No")</td>
            </tr>
            <tr>
                <td style="vertical-align: top;">Estimated box count:</td>
                <td>@a.BoxCount</td>
            </tr>
            <tr>
                <td style="vertical-align: top;">Location notes:</td>
                <td>@a.Notes</td>
            </tr>
        }

        if (@a.HouseOrApt == "Office")
        {
            <tr>
                <td style="vertical-align: top;">Elevator or Stairs:</td>
                <td>@a.ElevatorStairs</td>
            </tr>
            <tr>
                <td style="vertical-align: top;">Floor:</td>
                <td>@a.AptFloor</td>
            </tr>
            <tr>
                <td style="vertical-align: top;">Elevator / stairs & restrictions:</td>
                <td>@(@a.ElevatorStairsDescription ?? "No")</td>
            </tr>
            <tr>
                <td style="vertical-align: top;">Stairs leading to door:</td>
                <td>@(@a.StairsDescription ?? "No")</td>
            </tr>
            <tr>
                <td style="vertical-align: top;">Long walks to door:</td>
                <td>@(@a.LongWalksDescription ?? "No")</td>
            </tr>

            if (!String.IsNullOrEmpty(@a.Inventory))
            {
                <tr>
                    <td style=" vertical-align: top;">Inventory:</td>
                    <td>@a.Inventory</td>
                </tr>
            }

            <tr>
                <td style="vertical-align: top;">Special care items:</td>
                <td>@(@a.SpecialCareDescription ?? "No")</td>
            </tr>
            <tr>
                <td style="vertical-align: top;">Estimated box count:</td>
                <td>@a.BoxCount</td>
            </tr>
            <tr>
                <td style="vertical-align: top;">Location notes:</td>
                <td>@a.Notes</td>
            </tr>
        }

        if (@a.HouseOrApt == "Storage-Unit")
        {
            <tr>
                <td style="vertical-align: top;">Storage type</td>
                <td>@a.StorageType</td>
            </tr>
            <tr>
                <td style="vertical-align: top;">Access</td>
                <td>@a.StorageGroundFloorElevator</td>
            </tr>
            <tr>
                <td style="vertical-align: top;">Storage long walks</td>
                <td>@(@a.StorageLongWalksDescription ?? "No")</td>
            </tr>
            <tr>
                <td style="vertical-align: top;">Storage level</td>
                <td>@a.StorageGroundFloorElevator</td>
            </tr>
            <tr>
                <td style="vertical-align: top;">Elevator / stairs</td>
                <td>@(@a.ElevatorStairsDescription ?? "No")</td>
            </tr>

            if (!String.IsNullOrEmpty(@a.Inventory))
            {
                <tr>
                    <td style=" vertical-align: top;">Inventory:</td>
                    <td>@a.Inventory</td>
                </tr>
            }

            <tr>
                <td style="vertical-align: top;">Special care items:</td>
                <td>@(@a.SpecialCareDescription ?? "No")</td>
            </tr>
            <tr>
                <td style="vertical-align: top;">Estimated box count:</td>
                <td>@a.BoxCount</td>
            </tr>
            <tr>
                <td style="vertical-align: top;">Location notes:</td>
                <td>@a.Notes</td>
            </tr>
        }
    }
    <tr>
        <td colspan="2" style="border-top: 1px solid #CCC;"></td>
    </tr>
    <tr>
        @{

            var addressCount = estimateForm.Addresses.Count();

            var wayPoints = new List<string>();
            
            var mapString = "https://maps.google.com/maps/dir/?api=1";

            foreach (var c in estimateForm.Addresses)
            {
                var gAddress = string.Empty;

                gAddress = string.Concat(gAddress, string.Concat(@c.Address1, ", "), string.Concat(@c.City, ", ", @c.State, " ", @c.Postcode));

                //if(estimateForm.Addresses.First() == c)
                if(c.AddressType == "Starting Location")
                {
                    
                    mapString = string.Concat(mapString, "&origin=", gAddress);
                }
                else if (c.AddressType == "Ending Location")
                {
                    mapString = string.Concat(mapString, "&destination=", gAddress);
                }
                else
                {
                    //mapString = string.Concat(mapString, "&waypoints=", gAddress);
                    wayPoints.Add(gAddress);
                }
            }

            if (wayPoints.Any())
            {
                mapString += "&waypoints=";

                foreach (var w in wayPoints)
                {
                    if (w.Last() != '\0')
                    {
                        mapString += string.Concat(w, "|");
                    }
                    else
                    {
                        mapString += w;
                    }
                    
                }
            }
        }

        <td style="vertical-align: top;">Driving Route:</td>
        <td>@mapString.Replace(" ", "+").Replace(",", "")</td>
    </tr>
    <tr>
        <td colspan="2" style="border-top: 1px solid #CCC;"></td>
    </tr>
    <tr>
        <td style="vertical-align: top;">Feedback:</td>
        <td>@estimateForm.Feedback</td>
    </tr>
</table>